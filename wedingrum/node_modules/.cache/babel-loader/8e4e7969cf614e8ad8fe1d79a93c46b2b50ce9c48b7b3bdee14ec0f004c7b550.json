{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import'./Customer.scss';import AccordionItem from'./Accordion';import axios from'axios';import{API_URL}from'../../config/contansts';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const Customer=()=>{const[categories,setCategories]=useState([]);// FAQ 카테고리 데이터\nconst[selectedCategory,setSelectedCategory]=useState({});// 선택된 FAQ 카테고리\nconst[searchT,setSearchT]=useState('');// 검색어\nuseEffect(()=>{// FAQ 데이터를 불러오기 위한 useEffect\naxios.get(\"\".concat(API_URL,\"/api/faq\")).then(response=>{//console.log(\"response:\",response);\nsetCategories(response.data);// FAQ 데이터 설정\nsetSelectedCategory({category:'전체'});// 초기에 전체 카테고리를 선택\n}).catch(error=>console.error('에러:',error));},[]);// 빈 배열을 두어 한 번만 실행되도록 설정\nconst handleCategory=category=>{// FAQ 카테고리 선택 시 호출되는 함수\nsetSelectedCategory(category);};const handleSearch=e=>{// 검색어 입력 시 호출되는 함수\nsetSearchT(e.target.value);};// 중복되지 않는 카테고리 목록 생성\nconst uniqueCategories=Array.from(new Set(categories.map(category=>category.category)));return/*#__PURE__*/_jsxs(\"div\",{className:\"customer-container\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"center\",children:\"\\uACE0\\uAC1D\"}),/*#__PURE__*/_jsx(\"h1\",{className:\"center\",children:\"\\uC790\\uC8FC \\uBB3B\\uB294 \\uC9C8\\uBB38\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"search-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"dropdown\",children:/*#__PURE__*/_jsx(\"select\",{className:\"dropmenu\"// 현재 선택된 카테고리 값을 설정\n,value:selectedCategory.category// 새로운 카테고리를 선택할 때 호출되는 함수\n,onChange:e=>handleCategory({category:e.target.value}),children:[...uniqueCategories].map(categoryName=>/*#__PURE__*/ // 각 카테고리에 대한 옵션을 생성, 해당 카테고리 값을 옵션의 값으로 설정\n_jsx(\"option\",{value:categoryName,children:categoryName},categoryName))})}),/*#__PURE__*/_jsx(\"input\",{className:\"custom-input\",type:\"text\",value:searchT,onChange:handleSearch,placeholder:\"\\uAC80\\uC0C9\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"category-buttons\",children:uniqueCategories.map(categoryName=>/*#__PURE__*/_jsx(\"button\",{// 사용자가 버튼을 클릭할 때 호출되는 함수\nonClick:()=>handleCategory({category:categoryName})// 현재 선택된 카테고리와 버튼 카테고리가 일치하는지 확인, 일치하면 active\n,className:selectedCategory.category===categoryName?'active':'',children:categoryName},categoryName))}),/*#__PURE__*/_jsx(\"div\",{className:\"accordion-container\",children:selectedCategory.category&&selectedCategory.category!=='전체'?/*#__PURE__*/_jsx(\"div\",{children:categories.filter(category=>category.category===selectedCategory.category)// 검색어(searchT)에 따라 필터링\n// 이름이랑 설명 중 대소문자 포함 비교해서 보여줌\n.filter(item=>item.name.toLowerCase().includes(searchT.toLowerCase())||item.description.toLowerCase().includes(searchT.toLowerCase())).map((item,index)=>/*#__PURE__*/ // 각각의 질문과 답변을 보여주는 AccordionItem 컴포넌트를 렌더링\n_jsx(AccordionItem,{category:item,item:item},index))}):/*#__PURE__*/_jsx(\"div\",{children:categories.filter(category=>category.category!=='전체').filter(item=>item.name.toLowerCase().includes(searchT.toLowerCase())||item.description.toLowerCase().includes(searchT.toLowerCase())).map((item,index)=>/*#__PURE__*/ // 각각의 질문과 답변을 보여주는 AccordionItem 컴포넌트를 렌더링\n_jsx(AccordionItem,{category:item,item:item},index))})})]});};export default Customer;//나 너무 힘들어......... 데이터 너무 많아..","map":{"version":3,"names":["React","useState","useEffect","AccordionItem","axios","API_URL","jsx","_jsx","jsxs","_jsxs","Customer","categories","setCategories","selectedCategory","setSelectedCategory","searchT","setSearchT","get","concat","then","response","data","category","catch","error","console","handleCategory","handleSearch","e","target","value","uniqueCategories","Array","from","Set","map","className","children","onChange","categoryName","type","placeholder","onClick","filter","item","name","toLowerCase","includes","description","index"],"sources":["C:/Users/user/Desktop/WeddingRum-ec2/wedingrum/src/pages/Customer/Customer.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport './Customer.scss';\r\nimport AccordionItem from './Accordion';\r\nimport axios from 'axios';\r\nimport { API_URL } from '../../config/contansts';\r\n\r\nconst Customer = () => {\r\n  const [categories, setCategories] = useState([]); // FAQ 카테고리 데이터\r\n  const [selectedCategory, setSelectedCategory] = useState({}); // 선택된 FAQ 카테고리\r\n  const [searchT, setSearchT] = useState(''); // 검색어\r\n\r\n  useEffect(() => { // FAQ 데이터를 불러오기 위한 useEffect\r\n    axios.get(`${API_URL}/api/faq`)\r\n      .then(response => {\r\n        //console.log(\"response:\",response);\r\n        setCategories(response.data); // FAQ 데이터 설정\r\n        setSelectedCategory({ category: '전체' }); // 초기에 전체 카테고리를 선택\r\n      })\r\n      .catch(error => console.error('에러:', error));\r\n  }, []); // 빈 배열을 두어 한 번만 실행되도록 설정\r\n\r\n  const handleCategory = (category) => { // FAQ 카테고리 선택 시 호출되는 함수\r\n    setSelectedCategory(category);\r\n  };\r\n\r\n  const handleSearch = (e) => { // 검색어 입력 시 호출되는 함수\r\n    setSearchT(e.target.value);\r\n  };\r\n  // 중복되지 않는 카테고리 목록 생성\r\n  const uniqueCategories = Array.from(new Set(categories.map(category => category.category)));\r\n\r\n  return (\r\n    <div className=\"customer-container\">\r\n      <h2 className=\"center\">고객</h2>\r\n      <h1 className=\"center\">자주 묻는 질문</h1>\r\n      <div className=\"search-container\">\r\n        {/* FAQ 카테고리 선택 드롭다운 */}\r\n        <div className=\"dropdown\">\r\n          {/* select 사용하여 드롭다운 메뉴를 생성 */}\r\n          <select className=\"dropmenu\"\r\n            // 현재 선택된 카테고리 값을 설정\r\n            value={selectedCategory.category}\r\n            // 새로운 카테고리를 선택할 때 호출되는 함수\r\n            onChange={(e) => handleCategory({ category: e.target.value })}\r\n          >\r\n            {/* 전체와 중복되지 않는 카테고리 목록을 map하여 옵션으로 생성 */}\r\n            {[...uniqueCategories].map(categoryName => (\r\n              // 각 카테고리에 대한 옵션을 생성, 해당 카테고리 값을 옵션의 값으로 설정\r\n              <option key={categoryName} value={categoryName}>{categoryName}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <input\r\n          className=\"custom-input\"\r\n          type=\"text\"\r\n          value={searchT}\r\n          onChange={handleSearch}\r\n          placeholder=\"검색\"\r\n        />\r\n      </div>\r\n      {/* FAQ 카테고리 선택 버튼 그룹 */}\r\n      <div className=\"category-buttons\">\r\n        {/* uniqueCategories 배열을 map하여 각 카테고리에 대한 버튼을 생성 */}\r\n        {uniqueCategories.map(categoryName => (\r\n          <button\r\n            // 각 버튼에 대한 고유한 키를 설정\r\n            key={categoryName}\r\n            // 사용자가 버튼을 클릭할 때 호출되는 함수\r\n            onClick={() => handleCategory({ category: categoryName })}\r\n            // 현재 선택된 카테고리와 버튼 카테고리가 일치하는지 확인, 일치하면 active\r\n            className={selectedCategory.category === categoryName ? 'active' : ''}\r\n          >\r\n            {/* 버튼에 표시될 카테고리 이름 */}\r\n            {categoryName}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      {/* FAQ 카테고리에 따라 질문과 답변을 보여주는 부분 */}\r\n      <div className=\"accordion-container\">\r\n        {selectedCategory.category && selectedCategory.category !== '전체' ? (\r\n          <div>\r\n            {/* 선택된 카테고리가 전체가 아닌 경우 */}\r\n            {categories\r\n              .filter(category => category.category === selectedCategory.category)\r\n              // 검색어(searchT)에 따라 필터링\r\n              // 이름이랑 설명 중 대소문자 포함 비교해서 보여줌\r\n              .filter(item =>\r\n                item.name.toLowerCase().includes(searchT.toLowerCase()) ||\r\n                item.description.toLowerCase().includes(searchT.toLowerCase())\r\n              )\r\n              .map((item, index) => (\r\n                // 각각의 질문과 답변을 보여주는 AccordionItem 컴포넌트를 렌더링\r\n                <AccordionItem key={index} category={item} item={item} />\r\n              ))}\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            {/* 선택된 카테고리가 전체인 경우 */}\r\n            {categories\r\n              .filter(category => category.category !== '전체')\r\n              .filter(item =>\r\n                item.name.toLowerCase().includes(searchT.toLowerCase()) ||\r\n                item.description.toLowerCase().includes(searchT.toLowerCase())\r\n              )\r\n              .map((item, index) => (\r\n                // 각각의 질문과 답변을 보여주는 AccordionItem 컴포넌트를 렌더링\r\n                <AccordionItem key={index} category={item} item={item} />\r\n              ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Customer;\r\n\r\n//나 너무 힘들어......... 데이터 너무 많아.."],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}